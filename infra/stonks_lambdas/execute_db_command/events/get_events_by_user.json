{
    "body" : {
        "command": "MATCH (n:Person)\nWHERE n.Email = 'matt@gmail.com'\nWITH n\nMATCH (e:Event), (et:EventType)\nWHERE \n    (\n        (n)-[:INVITED|:CREATED_EVENT]->(e) \n        OR (\n            e.PublicEventFlag = true\n            AND\n            (n)-[:INTERESTED_IN]->(et)-[:RELATED_EVENT]->(e)\n        )\n    )\n    AND (\n        '2023-03-01T00:00:00' <= e.StartTimestamp < '2023-03-31T00:00:00'\n        OR\n        '2023-03-01T00:00:00' < e.EndTimestamp <= '2023-03-31T00:00:00'\n        OR\n        (e.StartTimestamp <= '2023-03-01T00:00:00' AND '2023-03-31T00:00:00' <= e.EndTimestamp)\n    )\n    AND point.distance(point(\n        { longitude: e.Lon, latitude: e.Lat }), \n        point({ longitude: -75.16, latitude: 39.95 })) <= 10 * 1000\nWITH n, COLLECT(e) as events\nUNWIND events as event\nOPTIONAL MATCH (u:Person)-[r:ATTENDING]->(event)\nWITH n, event, COALESCE(count(r), 0) as AttendeeCount\nMATCH (et:EventType)\n    WHERE ID(et) = event.EventTypeID\nWITH event, AttendeeCount, et,\n    CASE\n        WHEN (n)-[:ATTENDING]->(event) THEN True\n        ELSE False\n    END as ATTENDING_BOOLEAN\nRETURN event as Event, AttendeeCount, et.EventType as EventType, ATTENDING_BOOLEAN;"
    }
}